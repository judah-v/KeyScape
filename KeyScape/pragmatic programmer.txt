Preface to the Second Edition
Back in the 1990s, we worked with companies whose projects
were having problems. We found ourselves saying the same
things to each: maybe you should test that before you ship it;
why does the code only build on Mary’s machine? Why didn’t
anyone ask the users?
To save time with new clients, we started jotting down notes.
And those notes became The Pragmatic Programmer. To our
surprise the book seemed to strike a chord, and it has continued
to be popular these last 20 years.
But 20 years is many lifetimes in terms of software. Take a
developer from 1999 and drop them into a team today, and
they’d struggle in this strange new world. But the world of the
1990s is equally foreign to today’s developer. The book’s
references to things such as CORBA, CASE tools, and indexed
loops were at best quaint and more likely confusing.
At the same time, 20 years has had no impact whatsoever on
common sense. Technology may have changed, but people
haven’t. Practices and approaches that were a good idea then
remain a good idea now. Those aspects of the book aged well.
So when it came time to create this 20 Anniversary Edition,
th
we had to make a decision. We could go through and update the
technologies we reference and call it a day. Or we could
reexamine the assumptions behind the practices we
recommended in the light of an additional two decades’ worth
of experience.
In the end, we did both.
As a result, this book is something of a Ship of Theseus.
Roughly one-third of the topics in the book are brand new. Of
the rest, the majority have been rewritten, either partially or
totally. Our intent was to make things clearer, more relevant,
and hopefully somewhat timeless.
We made some difficult decisions. We dropped the Resources
appendix, both because it would be impossible to keep up-todate and because it’s easier to search for what you want. We
reorganized and rewrote topics to do with concurrency, given
the current abundance of parallel hardware and the dearth of
good ways of dealing with it. We added content to reflect
changing attitudes and environments, from the agile movement
which we helped launch, to the rising acceptance of functional
programming idioms and the growing need to consider privacy
and security.
Interestingly, though, there was considerably less debate
between us on the content of this edition than there was when
we wrote the first. We both felt that the stuff that was important
was easier to identify.
Anyway, this book is the result. Please enjoy it. Maybe adopt
some new practices. Maybe decide that some of the stuff we
suggest is wrong. Get involved in your craft. Give us feedback.
[1]
But, most important, remember to make it fun.
How the Book Is Organized
This book is written as a collection of short topics. Each topic is
self-contained, and addresses a particular theme. You’ll find
numerous cross references, which help put each topic in
context. Feel free to read the topics in any order—this isn’t a
book you need to read front-to-back.
Occasionally you’ll come across a box labeled Tip nn (such as
Tip 1, Care About Your Craft). As well as emphasizing points in
the text, we feel the tips have a life of their own—we live by
them daily. You’ll find a summary of all the tips on a pull-out
card inside the back cover.
We’ve included exercises and challenges where appropriate.
Exercises normally have relatively straightforward answers,
while the challenges are more open-ended. To give you an idea
of our thinking, we’ve included our answers to the exercises in
an appendix, but very few have a single correct solution. The
challenges might form the basis of group discussions or essay
work in advanced programming courses.
There’s also a short bibliography listing the books and articles
we explicitly reference.
What’s in a Name?
Scattered throughout the book you’ll find various bits of jargon
—either perfectly good English words that have been corrupted
to mean something technical, or horrendous made-up words
that have been assigned meanings by computer scientists with a
grudge against the language. The first time we use each of these
jargon words, we try to define it, or at least give a hint to its
meaning. However, we’re sure that some have fallen through
the cracks, and others, such as object and relational database,
are in common enough usage that adding a definition would be
boring. If you do come across a term you haven’t seen before,
please don’t just skip over it. Take time to look it up, perhaps on
the web, or maybe in a computer science textbook. And, if you
get a chance, drop us an email and complain, so we can add a
definition to the next edition.
Having said all this, we decided to get revenge against the
computer scientists. Sometimes, there are perfectly good jargon
words for concepts, words that we’ve decided to ignore. Why?
Because the existing jargon is normally restricted to a particular
problem domain, or to a particular phase of development.
However, one of the basic philosophies of this book is that most
of the techniques we’re recommending are universal:
modularity applies to code, designs, documentation, and team
organization, for instance. When we wanted to use the
conventional jargon word in a broader context, it got confusing
—we couldn’t seem to overcome the baggage the original term
brought with it. When this happened, we contributed to the
decline of the language by inventing our own terms.
Source Code and Other Resources
Most of the code shown in this book is extracted from
compilable source files, available for download from our
website.
There you’ll also find links to resources we find useful, along
with updates to the book and news of other Pragmatic
Programmer developments.
[2]
Send Us Feedback
We’d appreciate hearing from you. Email us at
ppbook@pragprog.com.
Second Edition Acknowledgments
We have enjoyed literally thousands of interesting
conversations about programming over the last 20 years,
meeting people at conferences, at courses, and sometimes even
on the plane. Each one of these has added to our understanding
of the development process, and has contributed to the updates
in this edition. Thank you all (and keep telling us when we’re
wrong).
Thanks to the participants in the book’s beta process. Your
questions and comments helped us explain things better.
Before we went beta, we shared the book with a few folks for
comments. Thanks to VM (Vicky) Brasseur, Jeff Langr, and Kim
Shrier for your detailed comments, and to José Valim and Nick
Cuthbert for your technical reviews.
Thanks to Ron Jeffries for letting us use the Sudoku example.
Much gratitude to the folks at Pearson who agreed to let us
create this book our way.
A special thanks to the indispensable Janet Furlow, who
masters whatever she takes on and keeps us in line.
And, finally, a shout out to all the Pragmatic Programmers out
there who have been making programming better for everyone
for the last twenty years. Here’s to twenty more.
Footnotes
Copyright © 2020 Pearson Education, Inc.
[1]
[2]
If, over the years, every component of a ship is replaced as it fails, is the resulting vessel
the same ship?
https://pragprog.com/titles/tpp20
From the Preface to the First
Edition
This book will help you become a better programmer.
You could be a lone developer, a member of a large project
team, or a consultant working with many clients at once. It
doesn’t matter; this book will help you, as an individual, to do
better work. This book isn’t theoretical—we concentrate on
practical topics, on using your experience to make more
informed decisions. The word pragmatic comes from the Latin
pragmaticus—“skilled in business”—which in turn is derived
from the Greek πραγματικός, meaning “fit for use.”
This is a book about doing.
Programming is a craft. At its simplest, it comes down to getting
a computer to do what you want it to do (or what your user
wants it to do). As a programmer, you are part listener, part
advisor, part interpreter, and part dictator. You try to capture
elusive requirements and find a way of expressing them so that
a mere machine can do them justice. You try to document your
work so that others can understand it, and you try to engineer
your work so that others can build on it. What’s more, you try to
do all this against the relentless ticking of the project clock. You
work small miracles every day.
It’s a difficult job.
There are many people offering you help. Tool vendors tout the
miracles their products perform. Methodology gurus promise
that their techniques guarantee results. Everyone claims that
their programming language is the best, and every operating
system is the answer to all conceivable ills.
Of course, none of this is true. There are no easy answers. There
is no best solution, be it a tool, a language, or an operating
system. There can only be systems that are more appropriate in
a particular set of circumstances.
This is where pragmatism comes in. You shouldn’t be wedded to
any particular technology, but have a broad enough background
and experience base to allow you to choose good solutions in
particular situations. Your background stems from an
understanding of the basic principles of computer science, and
your experience comes from a wide range of practical projects.
Theory and practice combine to make you strong.
You adjust your approach to suit the current circumstances and
environment. You judge the relative importance of all the
factors affecting a project and use your experience to produce
appropriate solutions. And you do this continuously as the work
progresses. Pragmatic Programmers get the job done, and do it
well.
Who Should Read This Book?
This book is aimed at people who want to become more effective
and more productive programmers. Perhaps you feel frustrated
that you don’t seem to be achieving your potential. Perhaps you
look at colleagues who seem to be using tools to make
themselves more productive than you. Maybe your current job
uses older technologies, and you want to know how newer ideas
can be applied to what you do.
We don’t pretend to have all (or even most) of the answers, nor
are all of our ideas applicable in all situations. All we can say is
that if you follow our approach, you’ll gain experience rapidly,
your productivity will increase, and you’ll have a better
understanding of the entire development process. And you’ll
write better software.
What Makes a Pragmatic Programmer?
Each developer is unique, with individual strengths and
weaknesses, preferences and dislikes. Over time, each will craft
their own personal environment. That environment will reflect
the programmer’s individuality just as forcefully as his or her
hobbies, clothing, or haircut. However, if you’re a Pragmatic
Programmer, you’ll share many of the following characteristics:
Early adopter/fast adapter
You have an instinct for technologies and techniques, and
you love trying things out. When given something new,
you can grasp it quickly and integrate it with the rest of
your knowledge. Your confidence is born of experience.
Inquisitive
You tend to ask questions. That’s neat—how did you do
that? Did you have problems with that library? What’s
this quantum computing I’ve heard about? How are
symbolic links implemented? You are a pack rat for little
facts, each of which may affect some decision years from
now.
Critical thinker
You rarely take things as given without first getting the
facts. When colleagues say “because that’s the way it’s
done,” or a vendor promises the solution to all your
problems, you smell a challenge.
Realistic
You try to understand the underlying nature of each
problem you face. This realism gives you a good feel for
how difficult things are, and how long things will take.
Deeply understanding that a process should be difficult
or will take a while to complete gives you the stamina to
keep at it.
Jack of all trades
You try hard to be familiar with a broad range of
technologies and environments, and you work to keep
abreast of new developments. Although your current job
may require you to be a specialist, you will always be able
to move on to new areas and new challenges.
We’ve left the most basic characteristics until last. All Pragmatic
Programmers share them. They’re basic enough to state as tips:
Tip 1 Care About Your Craft
We feel that there is no point in developing software unless you
care about doing it well.
Tip 2 Think! About Your Work
In order to be a Pragmatic Programmer, we’re challenging you
to think about what you’re doing while you’re doing it. This isn’t
a one-time audit of current practices—it’s an ongoing critical
appraisal of every decision you make, every day, and on every
project. Never run on auto-pilot. Constantly be thinking,
critiquing your work in real time. The old IBM corporate motto,
THINK!, is the Pragmatic Programmer’s mantra.
If this sounds like hard work to you, then you’re exhibiting the
realistic characteristic. This is going to take up some of your
valuable time—time that is probably already under tremendous
pressure. The reward is a more active involvement with a job
you love, a feeling of mastery over an increasing range of
subjects, and pleasure in a feeling of continuous improvement.
Over the long term, your time investment will be repaid as you
and your team become more efficient, write code that’s easier to
maintain, and spend less time in meetings.
Individual Pragmatists, Large Teams
Some people feel that there is no room for individuality on large
teams or complex projects. “Software is an engineering
discipline,” they say, “that breaks down if individual team
members make decisions for themselves.”
We strongly disagree.
There should be engineering in software construction. However,
this doesn’t preclude individual craftsmanship. Think about the
large cathedrals built in Europe during the Middle Ages. Each
took thousands of person-years of effort, spread over many
decades. Lessons learned were passed down to the next set of
builders, who advanced the state of structural engineering with
their accomplishments. But the carpenters, stonecutters,
carvers, and glass workers were all craftspeople, interpreting
the engineering requirements to produce a whole that
transcended the purely mechanical side of the construction. It
was their belief in their individual contributions that sustained
the projects: We who cut mere stones must always be
envisioning cathedrals.
Within the overall structure of a project there is always room for
individuality and craftsmanship. This is particularly true given
the current state of software engineering. One hundred years
from now, our engineering may seem as archaic as the
techniques used by medieval cathedral builders seem to today’s
civil engineers, while our craftsmanship will still be honored.
